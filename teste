const int maxSnakeLength = 50; // set the maximum length of the snake
int cubeLength = 1;; // current length of the snake
GLfloat cubePositions[maxSnakeLength][3];

...

// Add a new cube to the end of the snake
cubeLength++;
cubePositions[cubeLength - 1][0] = cubePositions[cubeLength - 2][0];
cubePositions[cubeLength - 1][1] = cubePositions[cubeLength - 2][1];
cubePositions[cubeLength - 1][2] = cubePositions[cubeLength - 2][2];

// Update the position of all the cubes
for (int j = cubeLength - 2; j >= 1; j--)
{
    cubePositions[j][0] = cubePositions[j - 1][0];
    cubePositions[j][1] = cubePositions[j - 1][1];
    cubePositions[j][2] = cubePositions[j - 1][2];
}
cubePositions[0][0] = cubeX;
cubePositions[0][1] = cubeY;
cubePositions[0][2] = cubeZ;

...

// Set the color of the cube
glColor3f(1.0f, 0.0f, 0.0f);
// Draw the cube
for (int i = 0; i < cubeLength; i++) {
    glPushMatrix();
    glTranslatef(cubePositions[i][0], cubePositions[i][1] + 0.5f, cubePositions[i][2]);
    glScalef(1.0f, 1.0f, 1.0f);
    glutSolidCube(1.0f);
    glPopMatrix();
}

...

// Update the positions of the cube segments
for (int i = cubeLength - 1; i > 0; i--)
{
    cubePositions[i][0] = cubePositions[i - 1][0];
    cubePositions[i][1] = cubePositions[i - 1][1];
    cubePositions[i][2] = cubePositions[i - 1][2];
}
cubePositions[0][0] = cubeX;
cubePositions[0][1] = cubeY;
cubePositions[0][2] = cubeZ;